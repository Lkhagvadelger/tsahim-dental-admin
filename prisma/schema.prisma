// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// In the future we need to add country or nationality column
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  firstName           String
  lastName            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @default(now())
}

model Person {
  id                  String    @id @default(cuid())
  register            String?
  firstName           String
  lastName            String
  birthDate           DateTime
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  age                 Int
  gender              String
  email               String?
  address             String?
  note                String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Patient             Patient[] @relation("PatientPerson")
  Doctor              Doctor[]
}

model Patient {
  id                 String         @id @default(cuid())
  cardNumber         Int            @unique
  person             Person         @relation("PatientPerson", fields: [personId], references: [id])
  personId           String
  profession         String?
  engagementType     StaticChoice   @relation(fields: [engagementTypeId], references: [id])
  engagementTypeId   String
  initFamilyMember   FamilyMember[] @relation("initFamilyMember")
  targetFamilyMember FamilyMember[] @relation("targetFamilyMember")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  electronCards      ECard[]
}

model FamilyMember {
  id              String   @id @default(cuid())
  initPatient     Patient  @relation("initFamilyMember", fields: [initPatientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  initPatientId   String
  targetPatient   Patient  @relation("targetFamilyMember", fields: [targetPatientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  targetPatientId String
  relation        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Doctor {
  id               String         @id @default(cuid())
  person           Person         @relation(fields: [personId], references: [id])
  bank             String
  bankAccount      String
  startedDate      DateTime
  dismissalDate    DateTime?
  workPosition     String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  personId         String
  hospitalBranch   HospitalBranch @relation(fields: [hospitalBranchId], references: [id])
  hospitalBranchId String
  ECard            ECard[]
}

model StaticChoiceType {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  StaticChoice StaticChoice[]
}

model StaticChoice {
  id                 String           @id @default(cuid())
  name               String
  desc               String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  staticChoiceTypeId String
  StaticChoiceType   StaticChoiceType @relation(fields: [staticChoiceTypeId], references: [id])
  Patient            Patient[]
}

model TreatmentType {
  id         String      @id @default(cuid())
  name       String
  desc       String
  treatments Treatment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model TreatmentGroup {
  id         String      @id @default(cuid())
  name       String
  desc       String
  treatments Treatment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Treatment {
  id                String            @id @default(cuid())
  name              String
  desc              String
  price             Int               @default(0)
  treatmentType     TreatmentType     @relation(fields: [treatmentTypeId], references: [id])
  treatmentTypeId   String
  treatmentGroup    TreatmentGroup?   @relation(fields: [treatmentGroupId], references: [id])
  treatmentGroupId  String?
  treatmentAction   TreatmentAction[]
  parentTreatment   Treatment?        @relation("parentChildTreatment", fields: [parentTreatmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentTreatmentId String?
  childTreatments   Treatment[]       @relation("parentChildTreatment")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ECard             ECard?            @relation(fields: [eCardId], references: [id])
  eCardId           String?
}

// This table should be extended for more detailed information
model TreatmentAction {
  id          String    @id @default(cuid())
  name        String
  desc        String
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Hospital {
  id           String   @id @default(cuid())
  name         String
  address      String
  phoneNumber  String
  directorName String
  licenseOrgId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model HospitalBranch {
  id           String   @id @default(cuid())
  name         String
  address      String
  phoneNumber  String
  directorName String
  doctors      Doctor[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id              String   @id @default(cuid())
  name            String
  address         String
  phoneNumber     String
  register        String
  email           String
  bank            String
  bankAccount     String
  partnershipDate DateTime
  note            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ClientComputer {
  id         String   @id @default(cuid())
  ipAddress  String
  macAddress String
  type       String   @default("client")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RiskRecognition {
  id        String   @id @default(cuid())
  name      String
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ECard {
  id          String      @id @default(cuid())
  date        DateTime
  teeth       Int
  eCardType   ECardType   @relation(fields: [eCardTypeId], references: [id])
  eCardTypeId String
  treatments  Treatment[]
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctorId    String
  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patientId   String
  note        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ECardType {
  id        String   @id @default(cuid())
  name      String
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eCard     ECard[]
}
