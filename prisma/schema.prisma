// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

// In the future we need to add country or nationality column
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  firstName           String
  lastName            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @default(now())
}

model Person {
  id                  String    @id @default(cuid())
  register            String?
  firstName           String
  lastName            String
  birthDate           DateTime
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  age                 Int
  gender              String
  email               String?
  address             String?
  note                String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Patient             Patient[] @relation("PatientPerson")
  Doctor              Doctor[]
}

model Patient {
  id                 String         @id @default(cuid())
  cardNumber         Int            @unique
  person             Person         @relation("PatientPerson", fields: [personId], references: [id])
  personId           String
  profession         String?
  engagementType     StaticChoice   @relation(fields: [engagementTypeId], references: [id])
  engagementTypeId   String
  initFamilyMember   FamilyMember[] @relation("initFamilyMember")
  targetFamilyMember FamilyMember[] @relation("targetFamilyMember")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model FamilyMember {
  id              String   @id @default(cuid())
  initPatient     Patient  @relation("initFamilyMember", fields: [initPatientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  initPatientId   String
  targetPatient   Patient  @relation("targetFamilyMember", fields: [targetPatientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  targetPatientId String
  relation        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Doctor {
  id           String    @id @default(cuid())
  person       Person    @relation(fields: [personId], references: [id])
  bank         String
  bankAccount  String
  startedDate  DateTime
  leftDate     DateTime?
  workPosition String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  personId     String
}

model StaticChoiceType {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  StaticChoice StaticChoice[]
}

model StaticChoice {
  id                 String           @id @default(cuid())
  name               String
  desc               String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  staticChoiceTypeId String
  StaticChoiceType   StaticChoiceType @relation(fields: [staticChoiceTypeId], references: [id])
  Patient            Patient[]
}
