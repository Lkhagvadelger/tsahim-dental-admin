
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  passwordDigest: 'passwordDigest',
  phoneNumber: 'phoneNumber',
  phoneNumberVerified: 'phoneNumberVerified',
  timeZone: 'timeZone',
  role: 'role',
  bubbleId: 'bubbleId',
  bubbleRole: 'bubbleRole',
  slackPostId: 'slackPostId',
  autoReply: 'autoReply',
  isActive: 'isActive',
  disabledReason: 'disabledReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  tokenType: 'tokenType',
  expiresAt: 'expiresAt',
  scope: 'scope',
  idToken: 'idToken',
  sessionState: 'sessionState',
  oauthTokenSecret: 'oauthTokenSecret',
  oauthToken: 'oauthToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  birthDate: 'birthDate',
  profileData: 'profileData',
  picture: 'picture',
  notifyEmail: 'notifyEmail',
  notifyPush: 'notifyPush',
  notifyBadge: 'notifyBadge',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt'
});

exports.Prisma.ConversationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  botId: 'botId',
  userData: 'userData',
  prompt: 'prompt',
  userId: 'userId',
  isFlagged: 'isFlagged',
  isFinished: 'isFinished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  id: 'id',
  conversationId: 'conversationId',
  input: 'input',
  prompt: 'prompt',
  gptResponse: 'gptResponse',
  isGptFlagged: 'isGptFlagged',
  gptModeration: 'gptModeration',
  isManualResonse: 'isManualResonse',
  userResponse: 'userResponse',
  userModeration: 'userModeration',
  userAllowedByDefense: 'userAllowedByDefense',
  isUserFlagged: 'isUserFlagged',
  userData: 'userData',
  isDeliveredToUser: 'isDeliveredToUser',
  smsSid: 'smsSid',
  shouldFinish: 'shouldFinish',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BotScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  model: 'model',
  initialPrompt: 'initialPrompt',
  summarizePrompt: 'summarizePrompt',
  finisherPrompt: 'finisherPrompt',
  temperature: 'temperature',
  max_tokens: 'max_tokens',
  top_p: 'top_p',
  frequency_penalty: 'frequency_penalty',
  presence_penalty: 'presence_penalty',
  best_of: 'best_of',
  stopSequences: 'stopSequences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserBotsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  botId: 'botId',
  botSeedData: 'botSeedData',
  nextMessageHour: 'nextMessageHour',
  isFinished: 'isFinished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PayerScalarFieldEnum = makeEnum({
  id: 'id',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  stripeCurrentPeriodEnd: 'stripeCurrentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  active: 'active',
  name: 'name',
  description: 'description',
  image: 'image',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PriceScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  active: 'active',
  currency: 'currency',
  interval: 'interval',
  unitAmount: 'unitAmount',
  intervalCount: 'intervalCount',
  trialPeriodDays: 'trialPeriodDays',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SubscriptionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  priceId: 'priceId',
  status: 'status',
  startDate: 'startDate',
  endedAt: 'endedAt',
  trialEnd: 'trialEnd',
  trialStart: 'trialStart',
  cancelAt: 'cancelAt',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AppIntegrationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  clientId: 'clientId',
  clientKey: 'clientKey',
  isEnable: 'isEnable',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AppConfigurationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  value: 'value',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.UserRole = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.PriceInterval = makeEnum({
  day: 'day',
  month: 'month',
  week: 'week',
  year: 'year'
});

exports.PriceType = makeEnum({
  recurring: 'recurring',
  one_time: 'one_time'
});

exports.SubscriptionStatus = makeEnum({
  active: 'active',
  canceled: 'canceled',
  incomplete: 'incomplete',
  incomplete_expired: 'incomplete_expired',
  past_due: 'past_due',
  trialing: 'trialing',
  unpaid: 'unpaid'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Account: 'Account',
  Profile: 'Profile',
  Session: 'Session',
  Conversation: 'Conversation',
  Message: 'Message',
  Bot: 'Bot',
  UserBots: 'UserBots',
  Tag: 'Tag',
  Payer: 'Payer',
  Product: 'Product',
  Price: 'Price',
  Subscription: 'Subscription',
  AppIntegration: 'AppIntegration',
  AppConfiguration: 'AppConfiguration'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
